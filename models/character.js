

//Create a Character Schema for a representation of the Character model
//then immediately export it


var moongoose = require('mongoose');

var characterSchema = new mongoose.Schema({
  characterId: type: String, unique: true, index:true},
  name: String,
  race: String,
  gender: String,
  bloodline: String,
  wins: {type: Number, default:0},
  losses:{type:Number, default:0},
  reports: {type: Number, default:0},
  random: {type:[Number],index:'2d'},
  voted: {type:Boolean, default:false}
});

module.exports = moongoose.model('Character', characterSchema);

// random - an array of two numbers
// generated by [Math.random(), 0].
// It is a geospatial point as far as
// MongoDB is concerned. In order to
// grab a random character from the
// database we are going to use the
// $near operator. I found about this
// “trick” from Random record from MongoDB on
// StackOverflow.

//voted - a boolean for identifying which characters
//have already been voted. Previously, people were
//abusing the website by voting for the same character
//multiple times in a row. But now, when querying for
//two characters, only those characters that have not
//been voted will be fetched. Even if someone were to
//hit the API directly, a vote will not count for 
//already voted characters.




//
// Why yet another tutorial using MongoDB?
// Why not use MySQL, PostgreSQL, CouchDB
// or even RethinkDB? That's because
// I don't really care enough about the database layer for the types of apps
// I am building. I would much rather focus on the front-end stack,
// because that's one of my primary interests, not databases. MongoDB may not best-suited
// for all use cases, but it's a decent general-purpose database and it
// has worked well for me in the past 3 years.
